plugins {
    id 'java-library'
    id 'com.diffplug.spotless' version '6.6.1'
    id 'org.sonarqube' version '3.3'
    id 'jacoco'
}

group = 'com.worksap.nlp'
archivesBaseName = 'analysis-sudachi'
version = '2.1.1-SNAPSHOT'

tasks.withType(JavaCompile) {
    options.release = 8
    options.encoding = 'UTF-8'
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation 'com.worksap.nlp:sudachi:0.6.2'
    implementation "org.elasticsearch.client:transport:${elasticsearchVersion}"
    testImplementation "org.elasticsearch.test:framework:${elasticsearchVersion}"
    testRuntimeOnly 'org.apache.logging.log4j:log4j-core:2.17.2'
}

def buildTestDict = tasks.register('buildTestDict', JavaExec) {
    dependsOn processTestResources
    mainClass = 'com.worksap.nlp.sudachi.dictionary.DictionaryBuilder'
    classpath = sourceSets.main.runtimeClasspath
    args('-o', 'build/resources/test/com/worksap/nlp/lucene/sudachi/ja/system_core.dic', '-m', 'src/test/dict/matrix.def', 'src/test/dict/lex.csv')
}
test.dependsOn buildTestDict

def embedVersion = tasks.register('embedVersion', Copy) {
    from 'src/main/extras/plugin-descriptor.properties'
    into 'build/descriptor'
    expand([version: version, elasticsearchVersion: elasticsearchVersion])
}

def copyDependencies = tasks.register('copyDependencies', Copy) {
    def libs = ['sudachi', 'javax.json', 'jdartsclone']
    from configurations.runtimeClasspath.collect { f -> (libs.any { f.name.startsWith(it) }) ? f : null }
    into 'build/libs'
}

def distZip = tasks.register('distZip', Zip) {
    dependsOn tasks.jar, embedVersion, copyDependencies
    archiveBaseName = archivesBaseName
    archiveAppendix = elasticsearchVersion
    from 'build/libs/', 'build/descriptor', 'LICENSE', 'README.md'
}

artifacts {
    archives distZip
}

// See https://github.com/diffplug/spotless/tree/main/plugin-gradle
spotless {
    // watch for https://github.com/diffplug/spotless/issues/911 to be closed
    ratchetFrom 'origin/develop'
    encoding 'UTF-8' // all formats will be interpreted as UTF-8

    format 'misc', {
        target '*.gradle', '*.md', '.gitignore', '*.txt', '*.csv'

        trimTrailingWhitespace()
        indentWithSpaces(2)
        endWithNewline()
    }
    java {
        // don't need to set target, it is inferred from java
        // version list: https://github.com/diffplug/spotless/tree/main/lib-extra/src/main/resources/com/diffplug/spotless/extra/eclipse_jdt_formatter
        eclipse('4.21.0').configFile('.formatter/eclipse-formatter.xml')
        licenseHeaderFile('.formatter/license-header')
    }
    kotlin {
        // by default the target is every '.kt' and '.kts` file in the java sourcesets
        ktfmt('0.36')
        licenseHeaderFile('.formatter/license-header')
    }
}

sonarqube {
  properties {
    property "sonar.projectKey", "WorksApplications_elasticsearch-sudachi"
    property "sonar.organization", "worksapplications"
    property "sonar.host.url", "https://sonarcloud.io"
  }
}

jacocoTestReport {
    reports {
        xml.required = true
    }
    dependsOn test
}
